import numpy as np
#import matplotlib as pylab
from matplotlib import pylab


def thresholding_algo(y, lag, threshold, influence):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag])
    for i in range(lag, len(y) - 1):
        if y[i] - avgFilter[i-1] > threshold * stdFilter [i-1]:
            signals[i] = 1
            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1] #always load previous filteredY value
            #avgFilter[i] = avgFilter[i-1]
            #stdFilter[i] = stdFilter[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])

    return dict(signals = np.asarray(signals),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

def noActiveInPrevious(index,r,signals):
    flag = True
    l=0
    if index-r >= 0:
        l = index-r
	
    for i in range(l,index):
        if signals[i]==1:
            flag=False
            break
	
    return flag

def noActiveInFollow(index,r,signals):
    flag = True
    u=len(signals)
    if index+r < len(signals) :
        u = index+r+1

    for i in range(index+1,u):
        if signals[i]==1:
            flag=False
            break
    return flag


def refineSignals(signals,r):
	refined_s = np.array(signals)

	for i in range(0,len(signals)):
		if signals[i] == 1 and noActiveInPrevious(i,r,signals) and noActiveInFollow(i,r,signals):
			refined_s[i]=0
		elif signals[i] == 0 and (not noActiveInPrevious(i,r,signals)) and (not noActiveInFollow(i,r,signals)):
			refined_s[i]=1
	return refined_s






def new_thresholding_algo(y, lag, threshold, influence,r):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[lag+1:lag*2])
    for i in range(0, len(y)):
    	avgFilter[i] = np.mean(y[(i-lag):i])
        stdFilter[i] = np.mean(y[i+1:i+1+lag])
        if y[i]  > threshold:
            signals[i] = 1

    refine_s_1 = refineSignals(signals,r)
    refine_s_2 = signals
    while not np.array_equal(refine_s_1,refine_s_2):
        refine_s_2 = refine_s_1
        refine_s_1 = refineSignals(refine_s_1,r)

    return dict(o_signals = np.asarray(signals),
				signals = np.asarray(refine_s_1),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

# Settings: lag = 30, threshold = 5, influence = 0
lag = 5
threshold = 5
influence = 0
r=8

# Run algo with settings from above
y = np.array([
1.706093390652405,3.1452385797576214,13.147428049642546,6.812473441003602,1.822756139589881,0.7234794949168644,1.1928116164744922,1.872197902924714,1.1819000751239797,1.4494296673076057,0.9184070080565586,0.4673728229855537,1.1802389954456602,2.140299566086821,0.9639014630070324,10.40485996105463,10.217210979181534,1.084457211518213,1.0709244419908979,9.622159406815234,10.511018903644777,1.0344628018208541,0.45992775471639763,0.01899840752445253,0.5999461122487457,2.5661139257706647,6.1379503380447575,9.04068840628958,1.16440693937925,1.71760262237881,2.0829119804610907,0.20207953784607033,2.405472867387279,0.7142061464384468,1.9079856730333655,4.044349879471574,5.904379134998409,1.04056903297249,0.2954186324397986,1.9473717242233604,2.553197915987185,0.7804618745401246,1.3033170182073568,0.43015831553810074,0.5120472243860049,1.8234494091153697,1.566837722998252,1.879211927305056,0.7215088368230227,2.3289706660958114,1.5385287564328913,0.43849369844130476,1.8172196927427813,3.1115768445798433,3.9421110190237187,2.331514711508217,3.8464812489501172,2.319336165868628,5.132702902065712,2.358827363247584,4.4508933494270275,3.7842795279209276,7.724054026211569,2.4021638569500854,1.6068346260722066,4.83512825161021,8.360461833690447,3.9588420377658964,1.26770416503911,3.256086253390883,2.7923126794302204,4.563093818222862,1.6703944833409285,2.0557595944893903,8.095042080224657,3.627248390745244,3.844501793934776,2.421573871339358,8.271015918586544,6.784041440954889,7.094754761762867,2.809908288623615,1.826518395636338,11.906634072094882,7.446796766802049,7.536881481467778,2.9417220568229148,1.1739818610214068,1.9237829964851005,2.4623034744101733,3.1726943487176795,1.967091567638504,0.31738918951709694,0.2989177304643146,1.0102962260428359,1.666863653641959,4.183235084227626,2.526420049744877,2.192630152174843,1.8061424267078654,2.8996021365775473,1.8018498272526497,3.6602021323657334,1.5579944325256738,2.7181643386013823,13.914421619332856,5.424898263419381,13.077004931715308,1.4887050002865225,1.979090798936379,7.122406118230211,11.32641690648455,4.690257146949238,8.514536560530223,6.135551451156671,3.9912146934996358,5.164381213697981,6.475877456519077,3.3113162036245356,2.181806902486681,3.989319647480373,0.43308446470039785,11.444766270694057,16.155750371426045,17.10312699817437,55.283956353691494,57.226111936201164,11.372795044332229,3.8238433346860403,5.2566677896158085,4.153998268459174,11.798181526151179,3.1243608631949717,7.012328876941321,2.9449984693720834,6.813736323166301,6.300066802045015,5.710459837875953,5.4953160266439065,2.9606311981631364,1.559977829196795,6.084793994850676,15.435288845266228,8.72823072567228,16.545750095122127,1.7694900988674356,8.346784365831413,10.478150233709309,2.122259229786683,13.477713144427057,6.1866987707794285,5.678664036164768,4.478741725122413,5.548254891636381,1.6276621675050957,22.562670585591782,35.44555412720819,8.89220146996697,1.1359280406761447,0.6840832081135321,0.2904632224554325,0.5793040804507712,1.6174826194787877,2.9631241127730443,2.942934429216683,5.387740799107137,3.1603255417683207,5.715588074878307,4.963546075156771,6.848847755233438,1.4340390114906312,8.53127816143781,8.521031778103113,5.089412351337596,2.51896775561086,4.76618272167758,0.7035816359051017,1.0517447068455517,0.7476187865769336,1.2664696855793443,1.207547166140692,2.1353403404890674,10.967921628881538,5.452343810285298,1.8251744328250321,1.539595017003351,2.86535309770282,0.5870877767346516,3.4778568410037467,4.8487511103052,2.7032869144914446,1.2835046452870595,0.7273702443616299,2.658559406887223,2.6066358729831567,0.39701073836050804,6.199070586964638,1.784497697826487,1.4415391675311133,2.014967394659522,0.8004799912720495,0.48321044525510415,0.5450942263286044,2.614009348178747,1.4209385524911355,2.777925565981275,1.7563094879808183,1.6286516144690537,1.499870962563993,0.4716648763601807,0.820800028278844,1.8481783127148765,1.6888531024724327,1.4340657810660635,0.10424778177184138,2.1072116647891086,2.361287390374238,2.2257349643874482,3.656002508523398,2.3372076292482142,1.0390963621646057,1.5509010630675908,0.15360063016280184,0.6847729039659151,0.500598663985655,0.31729573839710434,1.0497638927045547,0.6074725093633504,1.2839913589662593,2.6266630705976177,2.3006741604218357,3.102904009925018,0.8240625113041328,3.5804996185167157,5.502263782286905,2.500844495834881,4.4024210104933825,4.368757000547239,2.535233151031943,1.2774830919107085,1.9623437745458627,1.2474747285746388,1.7483080814283913,1.5172311571510129,1.3094200611008187,0.8209995919575164,0.8626709787372651,0.15084927046612856,1.0068918424590083,0.12572951277966743,1.2304763103863023,1.1773287214863901,1.6572641691942143,1.4883354616553668,0.8611369916216038,0.58580676132333,0.17685172999873394,1.4335504049666463,1.884019023275386,0.6161096736760574,1.125827730303222,1.05983762825765,1.089199099520477,2.6507119533471273,1.1653217445123092,1.7433260757581863,
])
result = new_thresholding_algo(y, lag=lag, threshold=threshold, influence=influence,r=r)


# Data
#y = np.array([1,1,1.1,1,0.9,1,1.2,1.3,0.8,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
#       1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
#       2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1])
# Plot result
pylab.subplot(311)
pylab.plot(np.arange(0, len(y)), y,marker="+")

#pylab.plot(np.arange(0, len(y)), result["avgFilter"], color="cyan", lw=2)

#pylab.plot(np.arange(1, len(y)+1), result["stdFilter"], color="green", lw=2)

pylab.axhline(y=threshold)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] + threshold * result["stdFilter"], color="green", lw=2)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] - threshold * result["stdFilter"], color="green", lw=2)

pylab.subplot(312)
pylab.plot(np.arange(0, len(y)), result["signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)

pylab.subplot(313)
pylab.plot(np.arange(0, len(y)), result["o_signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)

pylab.show()
