import numpy as np
#import matplotlib as pylab
from matplotlib import pylab


def thresholding_algo(y, lag, threshold, influence):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag])
    for i in range(lag, len(y) - 1):
        if y[i] - avgFilter[i-1] > threshold * stdFilter [i-1]:
            signals[i] = 1
            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1] #always load previous filteredY value
            #avgFilter[i] = avgFilter[i-1]
            #stdFilter[i] = stdFilter[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])

    return dict(signals = np.asarray(signals),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

def noActiveInPrevious(index,r,signals):
    flag = True
    l=0
    if index-r >= 0:
        l = index-r
	
    for i in range(l,index):
        if signals[i]==1:
            flag=False
            break
	
    return flag

def noActiveInFollow(index,r,signals):
    flag = True
    u=len(signals)
    if index+r < len(signals) :
        u = index+r+1

    for i in range(index+1,u):
        if signals[i]==1:
            flag=False
            break
    return flag


def refineSignals(signals,r):
	refined_s = np.array(signals)

	for i in range(0,len(signals)):
		if signals[i] == 1 and noActiveInPrevious(i,r,signals) and noActiveInFollow(i,r,signals):
			refined_s[i]=0
		elif signals[i] == 0 and (not noActiveInPrevious(i,r,signals)) and (not noActiveInFollow(i,r,signals)):
			refined_s[i]=1
	return refined_s






def new_thresholding_algo(y, lag, threshold, influence,r):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[lag+1:lag*2])
    for i in range(0, len(y)):
    	avgFilter[i] = np.mean(y[(i-lag):i])
        stdFilter[i] = np.mean(y[i+1:i+1+lag])
        if y[i]  > threshold:
            signals[i] = 1

    refine_s_1 = refineSignals(signals,r)
    refine_s_2 = signals
    while not np.array_equal(refine_s_1,refine_s_2):
        refine_s_2 = refine_s_1
        refine_s_1 = refineSignals(refine_s_1,r)

    return dict(o_signals = np.asarray(signals),
                signals = np.asarray(refine_s_1),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

# Settings: lag = 30, threshold = 5, influence = 0
lag = 5
threshold = 4
influence = 0
r=5

# Run algo with settings from above
y = np.array([
0.1819248899344485,0.3350823206472848,1.6885757069815746,2.392836519331662,0.6629802353093295,0.2789626562863394,0.32441919116321105,1.7450577261475704,1.5468080625805603,16.71338669718127,3.7540389180914575,7.9684392402783075,2.3500136562175102,3.905881908923477,0.696895298015238,10.104136556874717,11.574475367840666,2.0408410223069096,4.871222044993191,1.6592805429814441,3.3348261244139614,3.2004578312720326,0.4818243347792319,1.7629662190863247,2.577218823787447,0.790772624973197,0.7086037979138803,1.438251775594457,1.0607194758325078,0.8242479490519733,1.1228984048499044,0.6701831466302015,0.8629215732502894,1.1439268340106563,0.5097847784743725,2.309035871855623,3.4545657368839087,0.4678952057529332,0.4540585425412066,0.0953713081158048,0.2068877773034381,0.543153653762068,1.8151254533916732,0.8504543681972974,0.40295624775120054,0.7432757647025776,3.725575157547952,2.249780882141077,3.6545155903296425,3.4862799532631046,0.5012062026811512,1.779475574574811,1.917481650508341,1.0880750564265347,1.1307673812701902,2.1542311521008704,1.5178483091788584,2.2209183142302185,2.966626070397698,0.33014405583934087,0.15666616865625593,0.7243789121890344,0.5836254830385806,0.6832721920583185,0.531625505806056,0.8328610391279139,1.4982106822380332,1.2893623565148917,0.1221520364188057,1.5445131014057485,2.1712691326592717,1.114636208966384,0.36970319122175443,6.957466484292506,2.3158570249706085,9.119607386377702,3.349251044607798,2.380471010840592,4.538180885959116,2.9256503223052994,0.9943803347197523,4.337053481060932,15.03981099351869,8.110579069077623,3.9301690396532343,4.569110759733713,6.290770727396609,10.948746949117174,5.236668945649563,5.374584374643608,8.758973496229466,6.876263283038024,3.067797054305257,5.6783546821382975,3.209156251752488,0.9619853531461743,4.866384211091907,1.2075810367073456,3.3636627655644857,1.3161935638029438,1.4461448448709935,1.018468035644938,2.1072690436591115,2.294025760615305,3.5355895610306014,7.057707962498948,3.9120966826548873,1.2323073967339582,2.7509793400696045,4.4482691015639375,1.3172364622683272,1.5590019135467257,1.0250221478681303,3.153623846657007,0.5459090844089303,3.5285055694175425,0.9811732437908672,4.126655767628603,4.1125373845690865,8.702846056325452,2.941442977610302,3.960761596676904,4.177654097700605,4.443306202534663,4.51934353124673,1.2280924233879922,2.5364051654683375,1.386226306121698,3.515422915175788,0.7961238157529593,0.45591946658921606,0.8804163788124493,1.6127016538992585,0.3153474630066354,0.7456940595354281,1.14475476655158,1.3757078067466046,1.090669537416424,1.0956421495670716,0.35347561443642994,1.0399821729233099,0.29282334674358507,5.111762078357415,5.026135270131776,0.4289899765860302,0.9026523352898679,0.5169731617864991,0.36846341693819507,0.9193553012830897,1.1777194784642966,0.9530129367039981,2.3299272658901513,18.350162341698805,8.724547203845635,0.8514604948556828,2.432505621450459,5.3967768134901455,3.254835037036467,3.456209657060002,0.8263771932807226,2.8866014619197777,1.368969568105633,10.41091932816064,10.30181680537332,1.7292390937815838,1.7166122399893493,1.2509908655550963,1.3317329475450235,2.5276438139712067,3.156511148773578,2.6770757748538276,4.964203808254815,2.780294372921376,1.0015587499853196,16.80767629122237,2.201575680754851,4.917287662199179,6.198197461370013,1.6029294119044544,2.422794109578141,6.200182662806416,7.198544747077825,2.639372756083924,1.1630138896703799,5.1097423378925715,0.8569628173935373,0.5809937586376257,0.3907706519153975,1.4393880088507962,1.79976382904812,3.46283961766961,4.887979949062648,10.298626364504,5.295891027419628,1.3798708281458256,5.0078051030687405,5.18516838469704,2.720309069505313,1.5593344258454525,7.950566055349616,2.9265580659810677,4.7221869138986285,4.3560460833374375,1.8250242185236165,6.47263013619146,3.7789588288829092,2.574642602376484,4.56039052748069,10.095342526148631,22.976394733206362,3.9185628092336975,2.9915158830144346,7.977075983002718,4.719869010941178,9.109809917255145,6.271881073530464,2.963945267769462,8.172143978852885,12.73281277055767,10.762283058096331,0.5829983769714544,0.1298620945298915,0.4499215380517533,26.77486685159321,5.884918942373706,4.871966723343908,1.0180432975243965,0.8578580479360467,0.9870966131100378,0.32159734135314366,0.6702605690448538,4.895524169724277,5.452747715996096,0.5804225233453503,0.33099274920240457,1.5155594490511217,0.23255969124456238,0.6085238234202246,0.38524299657477007,0.5492761203142814,0.21560213723001875,0.16912875100549188,1.0220536580592359,0.5452857338578426,0.89793238607087,0.858573011740573,5.300624945619403,1.4137010993275765,3.5559030835288055,1.053203892892644,1.8035166826822573,0.4891543366470771,0.572561900268173,2.8596420056357195,3.3537628467749343,0.7430482363894976,3.3655382999163566,0.5731153604504816,1.4087416428325725,1.1961726933467454,0.7932556521708568,1.1891924361016626,1.6527139170281395,3.9865363693394955,2.7416223298848936,0.4834640508132866,2.3031643626914438,1.150412531924486,1.9521913762988359,1.251178240862376,2.6764659281172265,1.8113108650354235,0.7911313417971875,1.3571842345050065,1.1676021995491968,5.788088917067991,5.951854737590388,1.5060491259990685,4.6583598240072694,2.797578217609913,0.5470848596357235,0.41732484270161674,4.921474366486654,20.030854073661082,29.18625387758568
])
result = new_thresholding_algo(y, lag=lag, threshold=threshold, influence=influence,r=r)


# Data
#y = np.array([1,1,1.1,1,0.9,1,1.2,1.3,0.8,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
#       1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
#       2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1])
# Plot result
pylab.subplot(211)
pylab.plot(np.arange(0, len(y)), y,marker="+")

#pylab.plot(np.arange(0, len(y)), result["avgFilter"], color="cyan", lw=2)

#pylab.plot(np.arange(1, len(y)+1), result["stdFilter"], color="green", lw=2)

pylab.axhline(y=threshold)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] + threshold * result["stdFilter"], color="green", lw=2)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] - threshold * result["stdFilter"], color="green", lw=2)

# pylab.subplot(312)
# pylab.plot(np.arange(0, len(y)), result["signals"], color="red", lw=2)
# pylab.ylim(-1.5, 1.5)

pylab.subplot(212)
qr=np.array([
0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
])
pylab.plot(np.arange(0, len(qr)), qr, color="red", lw=2)

#pylab.plot(np.arange(0, len(y)), result["o_signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)

pylab.show()
