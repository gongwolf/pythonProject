import numpy as np
#import matplotlib as pylab
from matplotlib import pylab


def thresholding_algo(y, lag, threshold, influence):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag])
    for i in range(lag, len(y) - 1):
        if y[i] - avgFilter[i-1] > threshold * stdFilter [i-1]:
            signals[i] = 1
            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1] #always load previous filteredY value
            #avgFilter[i] = avgFilter[i-1]
            #stdFilter[i] = stdFilter[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag):i])
            stdFilter[i] = np.std(filteredY[(i-lag):i])

    return dict(signals = np.asarray(signals),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

def noActiveInPrevious(index,r,signals):
    flag = True
    l=0
    if index-r >= 0:
        l = index-r
	
    for i in range(l,index):
        if signals[i]==1:
            flag=False
            break
	
    return flag

def noActiveInFollow(index,r,signals):
    flag = True
    u=len(signals)
    if index+r < len(signals) :
        u = index+r+1

    for i in range(index+1,u):
        if signals[i]==1:
            flag=False
            break
    return flag


def refineSignals(signals,r):
	refined_s = np.array(signals)

	for i in range(0,len(signals)):
		if signals[i] == 1 and noActiveInPrevious(i,r,signals) and noActiveInFollow(i,r,signals):
			refined_s[i]=0
		elif signals[i] == 0 and (not noActiveInPrevious(i,r,signals)) and (not noActiveInFollow(i,r,signals)):
			refined_s[i]=1
	return refined_s






def new_thresholding_algo(y, lag, threshold, influence,r):
    signals = np.zeros(len(y))
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[lag+1:lag*2])
    for i in range(0, len(y)):
    	avgFilter[i] = np.mean(y[(i-lag):i])
        stdFilter[i] = np.mean(y[i+1:i+1+lag])
        if y[i]  > threshold:
            signals[i] = 1

    refine_s_1 = refineSignals(signals,r)
    refine_s_2 = signals
    while not np.array_equal(refine_s_1,refine_s_2):
        refine_s_2 = refine_s_1
        refine_s_1 = refineSignals(refine_s_1,r)

    return dict(o_signals = np.asarray(signals),
                signals = np.asarray(refine_s_1),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))

# Settings: lag = 30, threshold = 5, influence = 0
lag = 5
threshold = 4
influence = 0
r=5

# Run algo with settings from above
y = np.array([
10.172511811153559,0.5634957431055064,2.7628289342402503,11.770371333107962,6.531133906721271,6.133200561116758,7.400295218648802,1.578123027042744,0.260350493770476,1.6283245608870127,1.8572920713767473,2.4098781874763615,4.1729808880091985,5.1913360409080465,12.82535909285456,5.399718700814753,20.097482725018793,22.035392008772835,33.31511322821027,13.389302146537961,6.720909113039099,8.479958500161459,2.466401367274268,2.9722205083862456,1.4242863757288748,4.220666242481936,1.6550929815757276,8.776694280977773,5.129198826535418,2.618193591005711,2.391368288874188,0.863428614596223,0.5566013327206725,0.26997673972746405,0.654916710436244,0.3397140010227425,0.5653725175338009,0.7094684436344233,0.24320872725033663,0.10429953784812447,0.3714222698126224,0.2127655883693483,5.0502295878519226,6.039876439925371,0.7925572223062775,0.3263041525992143,0.7071617583539417,1.4112091310541008,0.9109237498734858,0.2495067334230336,0.22317875892073052,0.2087953557961994,0.2161062080032616,0.13171156524444952,0.7091311441613072,0.5436074922763088,0.23424284494601894,0.619861902031463,0.1148203923672505,0.5911184742530108,0.28055486165466553,0.30732413668966085,0.42092107621780556,0.682716019752999,0.120694127835849,0.593809301401812,0.8205406464538267,0.45156124720997814,0.6472548258756585,3.667728891594755,1.3045102052558541,2.1429825174868053,2.180850778939406,1.3707236628858213,3.059441352679147,1.9606009002124267,1.0635851176568707,0.6025927983463423,1.064689825444448,1.390389088140259,1.8318199060482292,4.428606679522299,1.4861936671914127,2.1084230210522357,10.53485396282183,1.038733925713528,1.2688601491221856,0.24697220011435084,0.31252288820038104,0.6043551193952781,0.4732473065161165,1.0866649905004286,0.6785906892870525,0.22461032568871303,0.5603945970562387,0.651400541231433,0.11289698851408861,0.5810246896558262,0.04625043232794448,0.3928041369001934,0.6648804822207395,0.6201558881497438,1.1934675699049877,0.8262963693571138,2.1809100164857314,1.4917925115676174,0.42282839974758996,0.8489870880282488,2.132933464288265,0.6751902617773807,2.517745398177224,1.0203261488367226,0.8676074140971091,1.371441102054781,0.8870184891056434,0.49381962103715893,0.19011449602988656,0.4255670964707683,0.14755277864249133,0.48803789037783485,0.5734698335818006,1.0629508892971913,1.7640879371595335,2.417734401376884,4.232021306646031,0.13910791350877655,0.5342100950280444,0.5568954300488275,0.3283279610493189,0.18505969312817588,0.6766650297670288,0.5480654340633971,0.552407675913692,0.27975574273017156,0.4159934042667627,1.9356253672526378,1.1574334553204246,1.5733498331950266,1.9784586457927427,0.6027802025054487,4.11885299203645,4.123854470569441,0.8973261572248401,1.640568793101598,0.4111234607267644,0.0485132930577551,6.493180234859077,3.1527262239435223,4.460427799059004,0.7205491083888426,11.966618245586522,14.362595772646046,4.486205242813068,3.590390637458944,2.436346098249664,2.928585494753109,1.5306097629585576,3.948184145903774,4.033379348478584,4.202712271300871,1.2064737554354992,2.6397347403491414,0.5400511717309895,6.059585098125353,6.926618879554679,7.043357423403216,1.7755798319392468,5.901220934008247,3.4043302010920233,5.712530522148676,3.0194113909247116,3.18766630147712,4.87484883714156,11.36692758305795,0.6971599816025632,0.32029140641724785,0.8926227200834559,0.8096170406409436,0.9278567656428734,0.3002333385847919,0.6340457778335505,0.9682690999331113,1.092131295064009,3.0626229229904984,1.4161908637075713,0.6412715792818222,0.2900458694974323,2.8014786011141974,2.0592372285830076,4.448868081889064,1.062862742787925,0.9987721824608464,1.47973566768933,1.9339016847008588,7.416888304277846,2.955958228729887,0.8292538161421611,1.6157408903650845,0.18793759496853588,0.5878929837943409,0.6292045697720472,0.5160969536955216,0.3717429900443722,0.4193015091731725,1.058425850772946,1.8253339196881047,0.4556984070013168,0.44360441879921586,1.0502314031213913,0.28034594706696925,0.5319527639829763,0.1730019236890386,0.5396014543965979,0.21442291759730728,0.6566009747292123,0.16888150757385478,0.326156087793004,3.362710458151947,2.3464568752858184,0.16830255617777928,0.438228665911841,1.1076546212690503,9.023948761464457,1.304366973894706,0.8604747349855495,1.2401616852938198,3.890282314944899,0.662503635928765,1.7442428551314948,2.4498997535453957,4.239849583418831,1.6785199634510506,1.3752028213890406,0.34348257365090046,0.8994481465854296,0.2167724152280845,0.9369626472954626,1.1256159965154704,1.0552795665426178,0.8342277677062908,1.0700410953384023,0.8015439929365079,1.2125867365154863,1.3917742368725996,1.0102130889067118,10.814100397626504,2.127281700271504,9.535184079551772,8.97123387905287,1.421057620775533,2.950500208720164,2.027218626583781,1.593200932087183,21.46475207517354,21.973515156102383,12.68143985025788,13.178148673171034,11.674860016410127,12.80954031422548,4.719884163369165,10.2299594681575,8.87659353508991,9.480636965220569,5.299418495777523,4.893187739121729,5.24041701335241,7.589733913610791,10.069150686041457,30.813031963114913,51.19041226479964,58.97933460296774,55.94936277048172,9.53167025552727,56.946044519312444,66.51859836259823,47.778169653607776,57.142273640612,23.50855401587214,11.285203147502955,12.092797539624401,6.084973305759972,3.0325024851496902,8.863552317227832,11.0939266602723,0.3870091621558837,1.2571018256105426,5.879602580273684,2.9102452608601834
])
result = new_thresholding_algo(y, lag=lag, threshold=threshold, influence=influence,r=r)


# Data
#y = np.array([1,1,1.1,1,0.9,1,1.2,1.3,0.8,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
#       1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
#       2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1])
# Plot result
pylab.subplot(311)
pylab.plot(np.arange(0, len(y)), y,marker="+")

#pylab.plot(np.arange(0, len(y)), result["avgFilter"], color="cyan", lw=2)

#pylab.plot(np.arange(1, len(y)+1), result["stdFilter"], color="green", lw=2)

pylab.axhline(y=threshold)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] + threshold * result["stdFilter"], color="green", lw=2)

#pylab.plot(np.arange(1, len(y)+1),
#           result["avgFilter"] - threshold * result["stdFilter"], color="green", lw=2)

pylab.subplot(312)
pylab.plot(np.arange(0, len(y)), result["signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)

pylab.subplot(313)
qr=np.array([
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0
])
pylab.plot(np.arange(0, len(qr)), qr, color="red", lw=2)

#pylab.plot(np.arange(0, len(y)), result["o_signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)

pylab.show()
